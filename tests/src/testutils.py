from src.common.classes import Note
from src.common.constants import Pitch, Position, RuleValue, Stroke


class PositionNote:
    """Utility class to enable a compact notation of Note objects."""

    def __init__(self, position: Position, autogenerated=False):
        self.position = position
        self.autogenerated = autogenerated

    def note(self, **kwargs) -> Note:
        """Creates a Note object with the given kwargs and the object's preset attributes"""
        kwargs = {"octave": 1, "stroke": Stroke.OPEN, "duration": 1, "rest_after": 0} | kwargs
        new_note = Note.get_note(position=self.position, **kwargs)
        transformation = RuleValue.SAME_TONE if new_note.is_melodic() else None
        return new_note.model_copy(update={"autogenerated": self.autogenerated, "transformation": transformation})

    # pylint: disable=missing-function-docstring

    @property
    def DONG0(self):
        return self.note(pitch=Pitch.DONG, octave=0)

    @property
    def DENG0(self):
        return self.note(pitch=Pitch.DENG, octave=0)

    @property
    def DUNG0(self):
        return self.note(pitch=Pitch.DUNG, octave=0)

    @property
    def DANG0(self):
        return self.note(pitch=Pitch.DANG, octave=0)

    @property
    def DING1(self):
        return self.note(pitch=Pitch.DING)

    @property
    def DONG1(self):
        return self.note(pitch=Pitch.DONG)

    @property
    def DONG1MUTED(self):
        return self.note(pitch=Pitch.DONG, stroke=Stroke.MUTED)

    @property
    def DENG1(self):
        return self.note(pitch=Pitch.DENG)

    @property
    def DUNG1(self):
        return self.note(pitch=Pitch.DUNG)

    @property
    def DANG1(self):
        return self.note(pitch=Pitch.DANG)

    @property
    def DING2(self):
        return self.note(pitch=Pitch.DING, octave=2)

    @property
    def MUTEDSTRIKE(self):
        return self.note(pitch=Pitch.STRIKE, octave=None, stroke=Stroke.MUTED)

    @property
    def SILENCE(self):
        return self.note(pitch=Pitch.NONE, octave=None, stroke=Stroke.SILENCE, duration=0, rest_after=1)

    @property
    def EXTENSION(self):
        return self.note(pitch=Pitch.NONE, octave=None, stroke=Stroke.EXTENSION)
