import unittest
from unittest.mock import MagicMock

from src.common.classes import Gongan, Score
from src.common.constants import Position, Stroke
from src.notation2midi.score2notation.score_to_pdf import ScoreToPDFConverter
from src.notation2midi.score2notation.utils import (
    aggregate_positions,
    clean_staves,
    has_kempli_beat,
    is_silent,
    measure_to_str,
    string_width_from_notes,
    to_aggregated_tags,
)
from src.settings.settings import Settings
from tests.conftest import BaseUnitTestCase
from tests.src.utils_for_tests import PositionNote, create_gongan

# pylint: disable=missing-function-docstring
# pylint: disable=invalid-name


class TestUtils(BaseUnitTestCase):
    """Test case for the src.notation2midi.score2notation.utils module"""

    def setUp(self):
        Settings.get(notation_id="test-gongkebyar", part_id="full")

    @classmethod
    def mock_score(cls):
        settings = Settings.get(notation_id="test-gongkebyar", part_id="full")
        mock_score = MagicMock(spec=Score, settings=settings)
        return mock_score

    def test_measure_to_str(self):
        P = PositionNote(position=Position.PEMADE_POLOS)
        GR_DENG1 = P.DENG1.model_copy_x(stroke=Stroke.GRACE_NOTE, duration=0)
        GR_DING2 = P.DING2.model_copy_x(stroke=Stroke.GRACE_NOTE, duration=0, symbol="I<")
        measures = [
            ("simple", [P.DANG0, P.DING1, P.DENG1, P.DUNG1], "a,ieu"),
            ("HTML char", [P.DANG0, P.DING1, P.DENG1, P.DING2], "a,iei&lt;"),
            ("Grace note U1", [P.DANG0, P.DING1, GR_DENG1, P.DUNG1], "a,iEu"),
            ("Grace note I2", [P.DANG0, P.DING1, GR_DING2, P.DANG1], "a,iIa"),
            ("Silence", [P.EXTENSION, P.EXTENSION, P.SILENCE, P.SILENCE], "--.."),
            ("Empty", [], ""),
        ]
        for name, measure, expected in measures:
            with self.subTest(id=name):
                self.assertEqual(measure_to_str(measure), expected)

    def test_clean_staves(self):
        U = PositionNote(position=Position.UGAL)
        Ua = PositionNote(position=Position.UGAL, autogenerated=True)
        gongans = [
            (create_gongan(1, {"UGAL": {-1: [[U.DING1, U.DONG1]]}}), {(Position.UGAL, -1): [[U.DING1, U.DONG1]]}),
            (create_gongan(2, {"UGAL": {-1: [[U.DING1, Ua.DING1]]}}), {(Position.UGAL, -1): [[U.DING1]]}),
            (create_gongan(3, {"UGAL": {-1: [[Ua.DING1, Ua.DING1]]}}), {}),
        ]
        for gongan, expected in gongans:
            with self.subTest(gongan_id=gongan.id):
                self.assertEqual(clean_staves(gongan), expected)

    def test_string_width_from_notes(self):
        ScoreToPDFConverter(score=self.mock_score())  # Needed to register the notation font
        P = PositionNote(position=Position.PEMADE_SANGSIH)
        DING2G = P.DING1.model_copy_x(stroke=Stroke.GRACE_NOTE, octave=2, duration=0)
        DING2M = P.DING2.model_copy_x(stroke=Stroke.MUTED)
        DING1X = P.DING2.model_copy_x(symbol="")
        font = "Bali Music 5", 10
        measures = [
            # (test name, measure, expected width expressed in number of notes)
            ("No modifs", [P.DING1, P.DUNG1, P.DANG1, P.DING2], 4),
            ("Grace note", [P.DING1, P.DUNG1, P.DANG1, DING2G], 3),
            ("Muted+pitch", [P.DING1, P.DUNG1, P.DANG1, DING2M], 4),
            ("Grace & Muted+pitch", [P.DING1, DING2G, P.DANG1, DING2M], 3),
            ("Missing symbol", [P.DING1, P.DUNG1, DING1X, DING1X], 2),
        ]
        for test_id, measure, width_in_notes in measures:
            with self.subTest(test=test_id):
                refwidth = string_width_from_notes([P.DING1] * width_in_notes, *font)
                self.assertEqual(string_width_from_notes(measure, *font), refwidth)

    def test_to_aggregated_tags(self):
        positions = [
            (
                "3 instr",
                {Position.PEMADE_POLOS, Position.UGAL, Position.CALUNG},
                {"pemade_polos", "ugal", "calung"},
            ),
            (
                "4 instruments",
                {Position.PEMADE_SANGSIH, Position.KANTILAN_POLOS, Position.UGAL, Position.CALUNG},
                {"pemade_sangsih", "kantilan_polos", "ugal", "calung"},
            ),
            (
                "aggr. pemade",
                {
                    Position.PEMADE_POLOS,
                    Position.PEMADE_SANGSIH,
                    Position.KANTILAN_POLOS,
                    Position.UGAL,
                    Position.CALUNG,
                },
                {"pemade", "kantilan_polos", "ugal", "calung"},
            ),
            (
                "aggr. gangsa",
                {
                    Position.PEMADE_POLOS,
                    Position.PEMADE_SANGSIH,
                    Position.KANTILAN_POLOS,
                    Position.KANTILAN_SANGSIH,
                    Position.UGAL,
                    Position.CALUNG,
                },
                {"gangsa", "ugal", "calung"},
            ),
        ]
        for test_id, position_list, expected in positions:
            with self.subTest(test=test_id):
                self.assertEqual(to_aggregated_tags(position_list), expected)

    def test_has_kempli_beat(self):
        gongans = [
            ({"id": 1, "metadata": [{"data": {"metatype": "KEMPLI", "status": "on"}}]}, True),
            ({"id": 2, "metadata": [{"data": {"metatype": "KEMPLI", "status": "off"}}]}, False),
            ({"id": 3, "metadata": [{"data": {"metatype": "GONGAN", "type": "regular"}}]}, True),
            ({"id": 4, "metadata": [{"data": {"metatype": "GONGAN", "type": "kebyar"}}]}, False),
            ({"id": 5, "metadata": [{"data": {"metatype": "GONGAN", "type": "gineman"}}]}, False),
        ]
        for record, expected in gongans:
            with self.subTest(gongan_id=record["id"]):
                gongan = Gongan.model_validate(record)
                self.assertEqual(has_kempli_beat(gongan), expected)

    def test_is_silent(self):
        U = PositionNote(position=Position.UGAL)
        gongans = [
            (create_gongan(1, {"UGAL": {-1: [[U.EXTENSION, U.SILENCE], [U.SILENCE, U.DONG1]]}}), False),
            (create_gongan(2, {"UGAL": {-1: [[U.EXTENSION, U.EXTENSION], [U.SILENCE, U.SILENCE]]}}), True),
        ]
        for gongan, expected in gongans:
            with self.subTest(gongan_id=gongan.id):
                self.assertEqual(is_silent(gongan, position=Position.UGAL, passid=-1), expected)

    def test_aggregate_positions(self):
        PP = PositionNote(position=Position.PEMADE_POLOS)
        PS = PositionNote(position=Position.PEMADE_SANGSIH)
        KP = PositionNote(position=Position.KANTILAN_POLOS)
        KS = PositionNote(position=Position.KANTILAN_SANGSIH)
        R1 = PositionNote(position=Position.REYONG_1)
        R2 = PositionNote(position=Position.REYONG_2)
        R3 = PositionNote(position=Position.REYONG_3)
        R4 = PositionNote(position=Position.REYONG_4)
        gongans = [
            (
                create_gongan(
                    1,
                    {
                        PP.position: {-1: [[PP.DANG0, PP.DING1]]},
                        PS.position: {-1: [[PS.DANG0, PS.DING1]]},
                        KP.position: {-1: [[KP.DANG0, KP.DING1]]},
                        KS.position: {-1: [[KS.DANG0, KS.DING1]]},
                    },
                ),
                {(Position.PEMADE_POLOS, -1): "GANGSA"},
            ),
            (
                create_gongan(
                    2,
                    {
                        PP.position: {-1: [[PP.DANG0, PP.DING1]]},
                        PS.position: {-1: [[PS.DANG0, PS.DING1]]},
                        KP.position: {-1: [[KP.DANG0, KP.DING1]]},
                        KS.position: {-1: [[KS.DENG0, KS.DING1]]},
                    },
                ),
                {
                    (Position.PEMADE_POLOS, -1): "GANGSA_P",
                    (Position.PEMADE_SANGSIH, -1): "PEMADE_S",
                    (Position.KANTILAN_SANGSIH, -1): "KANTILAN_S",
                },
            ),
            (
                create_gongan(
                    3,
                    {
                        PP.position: {-1: [[PP.DING1, PP.DING1]]},
                        PS.position: {-1: [[PS.DING1, PS.DONG1]]},
                        KP.position: {-1: [[KP.DANG0, KP.DING1]]},
                        KS.position: {-1: [[KS.DENG0, KS.DING1]]},
                    },
                ),
                {
                    (Position.PEMADE_POLOS, -1): "PEMADE_P",
                    (Position.PEMADE_SANGSIH, -1): "PEMADE_S",
                    (Position.KANTILAN_POLOS, -1): "KANTILAN_P",
                    (Position.KANTILAN_SANGSIH, -1): "KANTILAN_S",
                },
            ),
            (
                create_gongan(
                    4,
                    {
                        PP.position: {-1: [[PP.DING1, PP.DING1]]},
                        PS.position: {-1: [[PS.DING1, PS.DONG1]]},
                        KP.position: {-1: [[KP.DANG0, KP.DING1]]},
                        KS.position: {-1: [[KS.DENG0, KS.DING1]]},
                    },
                ),
                {
                    (Position.PEMADE_POLOS, -1): "PEMADE_P",
                    (Position.PEMADE_SANGSIH, -1): "PEMADE_S",
                    (Position.KANTILAN_POLOS, -1): "KANTILAN_P",
                    (Position.KANTILAN_SANGSIH, -1): "KANTILAN_S",
                },
            ),
            (
                create_gongan(
                    5,
                    {
                        R1.position: {-1: [[R1.BYONG, R1.BYONG]]},
                        R2.position: {-1: [[R2.BYOT, R2.BYOT]]},
                        R3.position: {-1: [[R3.BYONG, R3.BYONG]]},
                        R4.position: {-1: [[R4.BYOT, R4.BYOT]]},
                    },
                ),
                {
                    (Position.REYONG_1, -1): "REYONG_13",
                    (Position.REYONG_2, -1): "REYONG_24",
                },
            ),
            (
                create_gongan(
                    6,
                    {
                        R1.position: {-1: [[R1.BYONG, R1.BYONG]]},
                        R2.position: {-1: [[R2.BYONG, R2.BYONG]]},
                        R3.position: {-1: [[R3.BYONG, R3.BYONG]]},
                        R4.position: {-1: [[R4.BYONG, R4.BYONG]]},
                    },
                ),
                {
                    (Position.REYONG_1, -1): "REYONG",
                },
            ),
            (
                create_gongan(
                    7,
                    {
                        R1.position: {1: [[R1.BYONG, R1.BYONG]]},
                        R2.position: {1: [[R2.BYONG, R2.BYONG]]},
                        R3.position: {-1: [[R3.BYONG, R3.BYONG]]},
                        R4.position: {-1: [[R4.BYONG, R4.BYONG]]},
                    },
                ),
                {
                    (Position.REYONG_1, 1): "REYONG_1:1",
                    (Position.REYONG_2, 1): "REYONG_2:1",
                    (Position.REYONG_3, -1): "REYONG_3",
                    (Position.REYONG_4, -1): "REYONG_4",
                },
            ),
        ]
        for gongan, expected in gongans:
            with self.subTest(gongan_id=gongan.id):
                self.assertEqual(aggregate_positions(gongan), expected)


if __name__ == "__main__":
    unittest.main()
