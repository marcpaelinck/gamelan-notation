import unittest
from unittest.mock import MagicMock

from src.common.classes import Beat, Gongan, Measure
from src.common.constants import DEFAULT, DynamicLevel, Position
from src.common.notes import Note
from src.notation2midi.execution.execution import Dynamics, Score
from src.notation2midi.metadata_classes import DynamicsMeta, MetaDataBaseModel, MetaType
from src.notation2midi.pipeline.create_execution import ExecutionCreatorAgent
from src.settings.settings import Settings
from tests.conftest import BaseUnitTestCase
from tests.src.utils_for_tests import PositionNote

# pylint: disable=missing-module-docstring
# pylint: disable=missing-function-docstring
# pylint: disable=protected-access
# pylint: disable=invalid-name


P = PositionNote(Position.PEMADE_POLOS)
Pa = PositionNote(Position.PEMADE_POLOS, autogenerated=True)
S = PositionNote(Position.PEMADE_SANGSIH)
Sa = PositionNote(Position.PEMADE_SANGSIH, autogenerated=True)
J = PositionNote(Position.JEGOGAN)
Ja = PositionNote(Position.JEGOGAN, autogenerated=True)
C = PositionNote(Position.CALUNG)
Ca = PositionNote(Position.CALUNG, autogenerated=True)
Ka = PositionNote(Position.KEMPLI, autogenerated=True)


def create_beat(beat_id: int = 1, content: dict[PositionNote, list[Note]] = None):
    measures = {
        pn.position: Measure(
            position=pn.position,
            all_positions=pn.position,
            passes={DEFAULT: Measure.Pass(seq=-1, notesymbols=[note for note in measure])},
        )
        for pn, measure in content.items()
    }
    return Beat(
        id=beat_id,
        gongan_id=1,
        measures=measures,
    )


class TestDictToScoreConverter(BaseUnitTestCase):

    def setUp(self):
        pass

    def get_converter_gk(self):
        settings = Settings.get(notation_id="test-gongkebyar", part_id="full")
        mock_score = MagicMock(spec=Score)
        mock_score.settings = settings
        mock_score.gongans = {}
        mock_score.global_metadata = []
        return ExecutionCreatorAgent(mock_score)

    def create_gongan_with_metadata(self, gongan_id: int, meta_dict: dict[MetaType, MetaDataBaseModel]):
        beats = [
            create_beat(
                1,
                {
                    P: [P.DONG1, P.SILENCE, P.DENG1, P.DONG1],
                    S: [S.DUNG1, S.DANG1, S.SILENCE, S.DUNG1],
                    J: [J.DING1, J.EXTENSION, J.EXTENSION, J.EXTENSION],
                    C: [C.DING1, C.EXTENSION, C.DONG1, C.EXTENSION],
                },
            ),
            create_beat(
                2,
                {
                    P: [P.SILENCE, P.DONG1, P.DENG1, P.SILENCE],
                    S: [S.DENG1, S.DUNG1, S.SILENCE, S.DENG1],
                    J: [J.DING1, J.EXTENSION, J.EXTENSION, J.EXTENSION],
                    C: [C.DING1, C.EXTENSION, C.DONG1, C.EXTENSION],
                },
            ),
        ]
        return Gongan(id=gongan_id, beats=beats, metadata=meta_dict)

    def test_apply_meta(self):
        # Test for _apply_metadata method
        Settings.get(notation_id="test-gongkebyar", part_id="full")  # Needed to initialize classes
        converter = self.get_converter_gk()
        gongan: Gongan = None
        # pylint: disable=unnecessary-lambda-assignment
        # lambda is used to delay the calculation of the value to be tested
        tests = [
            (
                gongan := self.create_gongan_with_metadata(
                    1,
                    {
                        MetaType.DYNAMICS: [
                            DynamicsMeta(
                                abbreviation=DynamicLevel.PIANISSIMO,
                                first_beat=1,
                                positions=[Position.PEMADE_POLOS, Position.PEMADE_SANGSIH],
                            )
                        ]
                    },
                ),
                value := lambda: converter.execution_mgr.dynamics(gongan.beats[0]),
                expected := Dynamics(
                    value_dict={
                        (pos, DEFAULT, DEFAULT): gongan.metadata[MetaType.DYNAMICS][0].to_value
                        for pos in gongan.metadata[MetaType.DYNAMICS][0].positions
                    },
                    gradual=False,
                ),
            ),
            #     add LoopMeta
            #     add SequenceMeta
            #     add TempoMeta
        ]
        # pylint: enable=unnecessary-lambda-assignment
        for gongan, value, expected in tests:
            with self.subTest(gongan_id=gongan.id):
                converter._apply_metadata(gongan)
                self.assertEqual(value(), expected)

    def test_process_goto(self):
        # Add test for _process_goto method
        pass

    def test_process_sequences(self):
        pass


if __name__ == "__main__":
    unittest.main()
