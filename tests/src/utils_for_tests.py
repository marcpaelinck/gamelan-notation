from src.common.classes import Gongan
from src.common.constants import Pitch, Position, RuleValue, Stroke
from src.common.notes import Note
from src.notation2midi.metadata_classes import MetaData


class PositionNote:
    """Utility class to enable a compact notation of Note objects."""

    def __init__(self, position: Position, autogenerated=False):
        self.position = position
        self.autogenerated = autogenerated

    def note(self, **kwargs) -> Note:
        """Creates a Note object with the given kwargs and the object's preset attributes"""
        kwargs = {"octave": 1, "stroke": Stroke.OPEN, "duration": 1, "rest_after": 0} | kwargs
        new_note = Note.get_note(position=self.position, **kwargs)
        transformation = RuleValue.SAME_TONE if new_note.is_melodic() else None
        return new_note.model_copy(update={"autogenerated": self.autogenerated, "transformation": transformation})

    # pylint: disable=missing-function-docstring

    @property
    def DONG0(self):
        return self.note(pitch=Pitch.DONG, octave=0)

    @property
    def DENG0(self):
        return self.note(pitch=Pitch.DENG, octave=0)

    @property
    def DUNG0(self):
        return self.note(pitch=Pitch.DUNG, octave=0)

    @property
    def DANG0(self):
        return self.note(pitch=Pitch.DANG, octave=0)

    @property
    def DING1(self):
        return self.note(pitch=Pitch.DING)

    @property
    def DONG1(self):
        return self.note(pitch=Pitch.DONG)

    @property
    def DONG1MUTED(self):
        return self.note(pitch=Pitch.DONG, stroke=Stroke.MUTED)

    @property
    def DENG1(self):
        return self.note(pitch=Pitch.DENG)

    @property
    def DUNG1(self):
        return self.note(pitch=Pitch.DUNG)

    @property
    def DANG1(self):
        return self.note(pitch=Pitch.DANG)

    @property
    def DING2(self):
        return self.note(pitch=Pitch.DING, octave=2)

    @property
    def BYONG(self):
        return self.note(pitch=Pitch.BYONG, octave=None)

    @property
    def BYOT(self):
        return self.note(pitch=Pitch.BYONG, octave=None, stroke=Stroke.ABBREVIATED)

    @property
    def MUTEDSTRIKE(self):
        return self.note(pitch=Pitch.STRIKE, octave=None, stroke=Stroke.MUTED)

    @property
    def SILENCE(self):
        return self.note(pitch=Pitch.NONE, octave=None, stroke=Stroke.SILENCE, duration=0, rest_after=1)

    @property
    def EXTENSION(self):
        return self.note(pitch=Pitch.NONE, octave=None, stroke=Stroke.EXTENSION)


def create_gongan(g_id: int, staves: dict[str, dict[int, list[list[Note]]]], metadata: list[MetaData] = None) -> Gongan:
    """creates a gongan with multiple position and beats
    Args:
        g_id (int): gong id
        position (str): string value of position (should resolve to Position type)
        staves (dict[str, dict[int,list[list[Note]]]]): contains a list of measures for each position and pass.
        Each measure is a list of Note objects which can be created with the PositionNote class.
    """
    if metadata is None:
        metadata = []
    nr_beats = max([len(measure) for pass_ in staves.values() for measure in pass_.values()])
    beats = [
        {
            "id": b_id,
            "gongan_id": g_id,
            "flow": {
                "bpm_start": {},
                "bpm_end": {},
                "velocities_start": {},
                "velocities_end": {},
            },
            "duration": 0,
            "measures": {},
        }
        for b_id in range(1, nr_beats + 1)
    ]
    for position, stave in staves.items():
        for passid, measures in stave.items():
            for beat_seq, measure in enumerate(measures):
                pass_ = {"seq": passid, "notes": measure}
                measure = {
                    "position": position,
                    "all_positions": [],
                    "passes": {passid: pass_},
                }
                beats[beat_seq]["measures"] |= {position: measure}

    gongan = {"id": g_id, "beats": beats, "metadata": metadata}
    return Gongan.model_validate(gongan)
