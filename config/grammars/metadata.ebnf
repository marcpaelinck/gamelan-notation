(*
@@grammar::METADATA

start
    =
    "{"
    @:metadata 
    "}"
    $
    ;
*)

metadata
    =
    @:(dynamicsmeta |
        gonganmeta |
        gotometa |
        kemplimeta |
        autokempyungmeta |
        labelmeta |
        loopmeta |
        octavatemeta |
        partmeta |
        repeatmeta |
        sequencemeta |
        suppressmeta |
        tempometa |
        copymeta |
        validationmeta |
        waitmeta)
  ;

copymeta = metatype:'COPY' {('template' | 'value') '='} template:strvalue ['include' '=' include:strlistvalue];

dynamicsmeta = metatype:'DYNAMICS' {'value' '='} range_values:dynamics_range parameters:dynamicsmetaparameters ;
dynamicsmetaparameters ={[','] @:(beat_range_parm | beat_count_parm | first_beat_parm | passes_parm | iterations_parm | positions_parm)} ;

gonganmeta = metatype:'GONGAN' {('type'|'value') '='} type:strvalue ;
    
gotometa = metatype:'GOTO' {('label'|'value') '='} label:alphanumvalue parameters:gotometaparameters ;
gotometaparameters = parameters:{[','] @:(from_beat_parm | passes_parm)} ;
    
kemplimeta = metatype:'KEMPLI' {('status'|'value') '='} status:strvalue parameters:kemplimetaparameters ;
kemplimetaparameters = {[','] @:(beats_parm | scope_parm)} ;

autokempyungmeta = metatype:'AUTOKEMPYUNG' {('status'|'value') '='} status:strvalue parameters:autokempyungmetaparameters ;
autokempyungmetaparameters = {[','] @:(scope_parm | positions_parm)} ;

labelmeta = metatype:'LABEL' {('name'|'value') '='} name:alphanumvalue parameters:labelmetaparameters ;
labelmetaparameters = {[','] @:beat_parm} ;
    
loopmeta = metatype:'LOOP' {('count'|'value') '='} count:intvalue ;
    
octavatemeta = metatype:'OCTAVATE' {('instrument'|'value') '='} instrument:strvalue parameters:octavatemetaparameters ;
octavatemetaparameters = {[','] @:(octaves_parm | scope_parm)} ;

partmeta = metatype:'PART' {('name'|'value') '='} name:alphanumvalue ;
    
repeatmeta = metatype:'REPEAT' {('count'|'value') '='} count:intvalue ;
    
sequencemeta = metatype:'SEQUENCE' {'value' '='} value:strlistvalue_multiline ;
    
suppressmeta = metatype:'SUPPRESS' {('positions'|'value') '='} positions:strlistvalue  parameters:suppressmetaparameters ;
suppressmetaparameters = {[','] @:(beats_parm | passes_parm)} ;

tempometa = metatype:'TEMPO' {'value' '='} range_values:tempo_range  parameters:tempometaparameters ;
tempometaparameters = {[','] @:(beat_range_parm | beat_count_parm | first_beat_parm | passes_parm | iterations_parm)} ;

validationmeta = metatype:'VALIDATION' {('ignore'|'value') '='} (ignore:strlistvalue | ignore+:strvalue) parameters:validationmetaparameters ;
validationmetaparameters = {[','] @:(beats_parm | scope_parm)} ;

waitmeta = metatype:'WAIT' {('seconds'|'value') '='} seconds:floatvalue parameters:waitmetaparameters ;
waitmetaparameters = {[','] @:(after_parm | passes_parm)};

after_parm = 'after' '=' after:boolvalue;
beat_count_parm = 'beat_count' '=' beat_count:intvalue;
beat_parm = 'beat' '=' beat:intvalue;
beats_parm = ('beat' | 'beats') '=' (beats+:intvalue | beats:intlistvalue);
beat_range_parm = 'beats' '=' first_beat:intvalue "->" last_beat:intvalue;
(* dynamics_range can have format 'p..mf' or 'mf'*)
dynamics_range = [from_abbr:dynamics_value '->'] to_abbr:dynamics_value;
dynamics_value = 'pp' | 'p' | 'mp' | 'mf' | 'f' | 'ff';
first_beat_parm = ('first_beat' | 'beat') '=' first_beat:intvalue;
from_beat_parm = 'from_beat' '=' from_beat:intvalue;
octaves_parm = 'octaves' '=' octaves:intvalue;
passes_parm = ('pass' | 'passes') '=' (passes+:intvalue | passes:intlistvalue);
(* tempo_range can have format '100150' or '150'*)
tempo_range = [from_value:intvalue '->'] to_value:intvalue;
iterations_parm = ('iteration' | 'iterations') '=' (iterations+:intvalue | iterations:intlistvalue);
positions_parm = ('position' | 'positions') '=' (positions+:strvalue | positions:strlistvalue);
scope_parm = 'scope' '=' scope:strvalue;

strvalue = (nqstrvalue | sqstrvalue | dqstrvalue) ;
nqstrvalue = /[a-zA-Z_][\w\-]*/ ;      (* unquoted string *)
sqstrvalue = /'([a-zA-Z_][\w\- ]*)'/ ; (* single-quoted string *)
dqstrvalue = /"([a-zA-Z_][\w\- ]*)"/ ; (* double-quoted string *)
alphanumvalue = (nqalphanumvalue | sqalphanumvalue | dqalphanumvalue) ;
nqalphanumvalue = /[\d\w\+\-\\&]+/ ;      (* unquoted string *)
sqalphanumvalue = /'([\d\w\+\-\\& ]+)'/ ; (* single-quoted string *)
dqalphanumvalue = /"([\d\w\+\-\\& ]+)"/ ; (* double-quoted string *)
numvalue = intvalue | floatvalue ;
intvalue = /\d+/ ;
floatvalue = /\d+\.{0,1}\d*/ ;
boolvalue = 'true' | 'false' ;
strlistvalue = '[' @+:strvalue {',' @+:strvalue}* ']' ;
sp_nl = /(?m)[ \t\n\r]*/ ;  (* Extended space, including new line. (?m) allows multiline parsing. Default is single line *)
strlistvalue_multiline = '[' @+:strvalue {sp_nl ',' sp_nl @+:strvalue}* sp_nl ']' ;
intlistvalue = '[' @+:intvalue {',' @+:intvalue}* ']' ;
